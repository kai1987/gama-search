// Generated by CoffeeScript 1.8.0

/*
 * User YuanXiangDong
 * Date 14-10-14
 * aliyun search main
 * aliyun开放式搜索的接口实现
 */

(function() {
  var GET_HTTP_METHOD, SEARCH_LIST_SIZE, SIGN_MODE, SearchManager, assert, cryptoUtil, path, request, urlEncode, urlUtil, urllib, _;

  assert = require("assert");

  urlUtil = require('url');

  request = require('request');

  path = require('path');

  cryptoUtil = require('./utils/crypto_util');

  _ = require("underscore");

  urlEncode = require('./utils/url_encode');

  urllib = require('urllib');

  SIGN_MODE = 1;

  GET_HTTP_METHOD = "GET";

  SEARCH_LIST_SIZE = 40;

  SearchManager = (function() {
    function SearchManager(searchOptions) {
      assert(searchOptions, "missing options");
      assert(searchOptions.accessKeyId, "missing opensearch key id");
      assert(searchOptions.accessKeySecret, "missing opensearch key secret");
      this.accessKeyId = searchOptions.accessKeyId;
      this.accessKeySecret = searchOptions.accessKeySecret;
      this.apiURL = searchOptions.apiURL || 'http://opensearch.aliyuncs.com';
      this.version = searchOptions.version || 'v2';
      this.format = searchOptions.format || 'json';
      this.timeout = searchOptions.timeout || 3000;
      this.dataType = searchOptions.dataType || 'json';
      this.serverURL = this.apiURL;
      this.indexName = searchOptions.indexName || 'test';
      this.signatureMethod = searchOptions.signatureMethod || 'HMAC-SHA1';
      this.signatureVersion = searchOptions.SignatureVersion || '1.0';
    }

    SearchManager.prototype.insert = function(items, table_name, callback) {
      var params, url;
      url = urlUtil.resolve(this.serverURL, "index/doc");
      console.dir(items);
      params = {
        action: 'push',
        items: JSON.stringify(items),
        table_name: table_name
      };
      return this.apiCall(url, params, "GET", callback);
    };

    SearchManager.prototype.searchById = function(id, owner_id, callback) {
      var options, params, url;
      url = urlUtil.resolve(this.serverURL, path.join('search'));
      params = this.loadPublicParams();
      params['query'] = "config=fromat:json,start:0,hit:" + SEARCH_LIST_SIZE + "&&query=id:'" + id + "'&&filter=contain(owner_id, \"" + owner_id + "\")";
      params['index_name'] = this.indexName;
      params['Signature'] = cryptoUtil.makeSign(params, GET_HTTP_METHOD, this.accessKeySecret);
      options = {
        url: "" + url + "?" + (urlEncode.query2string(params)),
        method: GET_HTTP_METHOD,
        timeout: this.timeout
      };
      return request(options, function(err, res, body) {
        return callback(err, body);
      });
    };

    SearchManager.prototype.search = function(key, owner_id, callback) {
      var options, params, url;
      url = urlUtil.resolve(this.serverURL, path.join('search'));
      params = this.loadPublicParams();
      params['query'] = "config=fromat:json,start:0,hit:" + SEARCH_LIST_SIZE + "&&query=default:" + key + "&&filter=contain(owner_id, \"" + owner_id + "\")";
      params['index_name'] = this.indexName;
      params['Signature'] = cryptoUtil.makeSign(params, GET_HTTP_METHOD, this.accessKeySecret);
      options = {
        url: "" + url + "?" + (urlEncode.query2string(params)),
        method: GET_HTTP_METHOD,
        timeout: this.timeout
      };
      return request(options, function(err, res, body) {
        return callback(err, body);
      });
    };

    SearchManager.prototype.loadPublicParams = function() {
      var publicParams;
      publicParams = {};
      publicParams.Version = this.version;
      publicParams.AccessKeyId = this.accessKeyId;
      publicParams.SignatureMethod = 'HMAC-SHA1';
      publicParams.SignatureVersion = '1.0';
      publicParams.SignatureNonce = cryptoUtil.makeNonce(this.accessKeyId, this.accessKeySecret);
      publicParams.Timestamp = new Date().Format("yyyy-MM-ddThh:mm:ssZ");
      return publicParams;
    };

    SearchManager.prototype.apiCall = function(url, params, httpMethod, callback) {
      var options, queryParams;
      queryParams = queryParams || {};
      queryParams.Version = this.version;
      queryParams.AccessKeyId = this.accessKeyId;
      queryParams.SignatureMethod = 'HMAC-SHA1';
      queryParams.SignatureVersion = '1.0';
      queryParams.SignatureNonce = cryptoUtil.makeNonce(this.accessKeyId, this.accessKeySecret);
      queryParams.Timestamp = new Date().Format("yyyy-MM-ddThh:mm:ssZ");
      queryParams.Signature = cryptoUtil.makeSign(_.extend(queryParams, params), httpMethod, this.accessKeySecret);
      options = {
        url: "" + url + "?" + (urlEncode.query2string(_.extend(params, queryParams))),
        method: httpMethod,
        timeout: this.timeout
      };
      console.dir(options);
      return request(options, function(err, res, body) {
        console.log(err);
        console.log("================================");
        console.dir(body);
        return callback(err, body);
      });
    };

    return SearchManager;

  })();

  module.exports = SearchManager;

}).call(this);
