// Generated by CoffeeScript 1.8.0

/*
 * User YuanXiangDong
 * Date 14-10-14
 * aliyun search main
 * aliyun开放式搜索的接口实现
 */

(function() {
  var GET_HTTP_METHOD, POST_HTTP_METHOD, SEARCH_LIST_SIZE, SIGN_MODE, SearchManager, assert, cryptoUtil, path, request, urlEncode, urlUtil, _;

  assert = require("assert");

  urlUtil = require('url');

  request = require('request');

  path = require('path');

  cryptoUtil = require('./utils/crypto_util');

  _ = require("underscore");

  urlEncode = require('./utils/url_encode');

  SIGN_MODE = 1;

  GET_HTTP_METHOD = "GET";

  POST_HTTP_METHOD = "POST";

  SEARCH_LIST_SIZE = 40;

  SearchManager = (function() {
    function SearchManager(searchOptions) {
      assert(searchOptions, "missing options");
      assert(searchOptions.accessKeyId, "missing opensearch key id");
      assert(searchOptions.accessKeySecret, "missing opensearch key secret");
      this.accessKeyId = searchOptions.accessKeyId;
      this.accessKeySecret = searchOptions.accessKeySecret;
      this.apiURL = searchOptions.apiURL || 'http://opensearch.aliyuncs.com';
      this.version = searchOptions.version || 'v2';
      this.format = searchOptions.format || 'json';
      this.timeout = searchOptions.timeout || 3000;
      this.dataType = searchOptions.dataType || 'json';
      this.serverURL = this.apiURL;
      this.indexName = searchOptions.indexName || 'test';
      this.signatureMethod = searchOptions.signatureMethod || 'HMAC-SHA1';
      this.signatureVersion = searchOptions.signatureVersion || '1.0';
    }

    SearchManager.prototype.insert = function(items, table_name, callback) {
      var cmd, params, query, url, val, _i, _len;
      assert(Array.isArray(items) && items.length > 0, "missing options");
      assert(table_name, "missing table_name");
      assert(_.isFunction(callback), "missing callback");
      url = urlUtil.resolve(this.serverURL, path.join("index/doc", this.indexName));
      cmd = 'add';
      query = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        val = items[_i];
        query.push({
          cmd: cmd,
          fields: val
        });
      }
      params = {
        action: 'push',
        items: JSON.stringify(query),
        table_name: table_name,
        sing_mode: "" + SIGN_MODE
      };
      this.apiCall(url, params, POST_HTTP_METHOD, callback);
    };

    SearchManager.prototype.update = function(items, table_name, callback) {
      this.insert(items, table_name, callback);
    };

    SearchManager.prototype.searchById = function(id, owner_id, callback) {
      var options, params, url;
      url = urlUtil.resolve(this.serverURL, path.join('search'));
      params = this.loadPublicParams();
      params['query'] = "config=fromat:json,start:0,hit:" + SEARCH_LIST_SIZE + "&&query=id:'" + id + "'&&filter=contain(owner_id, \"" + owner_id + "\")";
      params['index_name'] = this.indexName;
      params['Signature'] = cryptoUtil.makeSign(params, GET_HTTP_METHOD, this.accessKeySecret);
      options = {
        url: "" + url + "?" + (urlEncode.query2string(params)),
        method: GET_HTTP_METHOD,
        timeout: this.timeout
      };
      request(options, function(err, res, body) {
        callback(err, body);
      });
    };

    SearchManager.prototype.search = function(queryStr, owner_id, callback) {
      var options, params, url;
      url = urlUtil.resolve(this.serverURL, path.join('search'));
      params = this.loadPublicParams();
      params['query'] = "config=fromat:json,start:0,hit:" + SEARCH_LIST_SIZE + "&&query=default:" + queryStr + "&&filter=contain(owner_id, \"" + owner_id + "\")";
      params['index_name'] = this.indexName;
      params['Signature'] = cryptoUtil.makeSign(params, GET_HTTP_METHOD, this.accessKeySecret);
      options = {
        url: "" + url + "?" + (urlEncode.query2string(params)),
        method: GET_HTTP_METHOD,
        timeout: this.timeout
      };
      request(options, function(err, res, body) {
        callback(err, body);
      });
    };

    SearchManager.prototype["delete"] = function(ids, table_name, callback) {
      var cmd, id, params, query, url, _i, _len;
      assert(Array.isArray(ids) && ids.length > 0, "missing options");
      assert(table_name, "missing table_name");
      assert(_.isFunction(callback), "missing callback");
      url = urlUtil.resolve(this.serverURL, path.join("index/doc", this.indexName));
      cmd = 'delete';
      query = [];
      for (_i = 0, _len = ids.length; _i < _len; _i++) {
        id = ids[_i];
        query.push({
          cmd: cmd,
          fields: {
            id: id
          }
        });
      }
      params = {
        action: 'push',
        items: JSON.stringify(query),
        table_name: table_name,
        sing_mode: "" + SIGN_MODE
      };
      this.apiCall(url, params, POST_HTTP_METHOD, callback);
    };

    SearchManager.prototype.loadPublicParams = function() {
      var publicParams;
      publicParams = {};
      publicParams.Version = this.version;
      publicParams.AccessKeyId = this.accessKeyId;
      publicParams.SignatureMethod = 'HMAC-SHA1';
      publicParams.SignatureVersion = '1.0';
      publicParams.SignatureNonce = cryptoUtil.makeNonce(this.accessKeyId, this.accessKeySecret);
      publicParams.Timestamp = new Date(new Date().getTime() - 28800000).Format("yyyy-MM-ddThh:mm:ssZ");
      return publicParams;
    };

    SearchManager.prototype.apiCall = function(url, params, httpMethod, callback) {
      var options, queryParams;
      queryParams = this.loadPublicParams();
      queryParams.Signature = cryptoUtil.makeSign(_.extend(queryParams, params), httpMethod, this.accessKeySecret);
      options = {
        url: "" + url,
        method: httpMethod,
        timeout: this.timeout,
        form: urlEncode.query2string(_.extend(params, queryParams))
      };
      request(options, function(err, res, body) {
        callback(err, body);
      });
    };

    return SearchManager;

  })();

  module.exports = SearchManager;

}).call(this);
